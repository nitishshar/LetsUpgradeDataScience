import PyPDF2
from PIL import Image
from pytesseract import image_to_string
from io import BytesIO

def extract_images_from_page(page):
    images = []
    
    # Check if the page contains an XObject
    resources = page.get('/Resources')
    if resources and '/XObject' in resources:
        x_objects = resources['/XObject'].get_object()

        for obj_name, obj in x_objects.items():
            # Check if the object is an image
            if obj.get('/Subtype') == '/Image':
                data = obj.get_data()
                width = obj['/Width']
                height = obj['/Height']
                color_space = obj.get('/ColorSpace', '/DeviceRGB')

                # Determine the image mode (RGB or grayscale)
                mode = 'RGB' if color_space == '/DeviceRGB' else 'L'

                # Handle different image formats
                if '/Filter' in obj:
                    if obj['/Filter'] == '/DCTDecode':  # JPEG
                        image = Image.open(BytesIO(data))
                    elif obj['/Filter'] == '/FlateDecode':  # PNG-like (raw)
                        image = Image.frombytes(mode, (width, height), data)
                    else:
                        print(f"Unsupported image filter: {obj['/Filter']}")
                        continue
                else:
                    image = Image.frombytes(mode, (width, height), data)

                images.append(image)
    return images

def extract_text_from_pdf_without_poppler(pdf_path):
    text_content = ""

    try:
        # Open the PDF file
        with open(pdf_path, "rb") as pdf_file:
            pdf_reader = PyPDF2.PdfReader(pdf_file)

            # Step 1: Extract text using PyPDF2
            for page in pdf_reader.pages:
                text_content += page.extract_text() or ""

                # Step 2: Extract images from the page and perform OCR on them
                images = extract_images_from_page(page)
                for image in images:
                    text_from_image = image_to_string(image)
                    text_content += f"\n--- OCR Text from Image ---\n{text_from_image}"

    except Exception as e:
        print(f"Error extracting text: {e}")

    return text_content

# Path to your PDF file
pdf_file_path = "path/to/your/pdf_file.pdf"

# Extract text from the PDF
extracted_text = extract_text_from_pdf_without_poppler(pdf_file_path)

# Save or print the extracted text
with open("extracted_text.txt", "w", encoding="utf-8") as text_file:
    text_file.write(extracted_text)

print("Text extraction completed. Check 'extracted_text.txt' for the output.")

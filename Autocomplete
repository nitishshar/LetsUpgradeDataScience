You're correct that in Angular Material 18, the `<mat-chip-list>` component has been replaced by more specific components to better align with accessibility standards and provide clearer semantics. The new components are:

- **`<mat-chip-listbox>`**: Used for selection patterns, allowing users to select one or multiple chips.
- **`<mat-chip-grid>`**: Used for input patterns, enabling users to add and remove chips dynamically.

To create an autocomplete textbox that supports both single and multi-select functionalities, and allows for custom values not present in the predefined options, you can use the `<mat-chip-grid>` component in combination with `<mat-chip-row>`. Here's how you can implement it:

**1. Install Angular Material:**

Ensure that Angular Material is added to your project:

```bash
ng add @angular/material
```

**2. Import Necessary Modules:**

In your Angular module, import the required modules:

```typescript
import { MatAutocompleteModule } from '@angular/material/autocomplete';
import { MatChipsModule } from '@angular/material/chips';
import { ReactiveFormsModule, FormsModule } from '@angular/forms';

@NgModule({
  imports: [
    MatAutocompleteModule,
    MatChipsModule,
    ReactiveFormsModule,
    FormsModule,
    // other imports
  ],
  // ...
})
export class AppModule {}
```

**3. Create the Autocomplete Component:**

Develop a component that handles both single and multi-select modes, allowing users to input custom values:

```typescript
import { Component, OnInit, Input } from '@angular/core';
import { FormControl } from '@angular/forms';
import { MatAutocompleteSelectedEvent } from '@angular/material/autocomplete';
import { Observable } from 'rxjs';
import { map, startWith } from 'rxjs/operators';

@Component({
  selector: 'app-custom-autocomplete',
  template: `
    <mat-form-field class="full-width">
      <mat-chip-grid #chipGrid>
        <mat-chip-row
          *ngFor="let value of selectedValues"
          [selectable]="true"
          [removable]="true"
          (removed)="remove(value)"
        >
          {{ value }}
          <button matChipRemove>
            <mat-icon>cancel</mat-icon>
          </button>
        </mat-chip-row>
        <input
          matInput
          [placeholder]="placeholder"
          [formControl]="inputControl"
          [matAutocomplete]="auto"
          [matChipInputFor]="chipGrid"
          (matChipInputTokenEnd)="addCustomValue($event)"
        />
      </mat-chip-grid>
      <mat-autocomplete
        #auto="matAutocomplete"
        [displayWith]="displayFn"
        (optionSelected)="onOptionSelected($event)"
      >
        <mat-option *ngFor="let option of filteredOptions | async" [value]="option">
          {{ option }}
        </mat-option>
      </mat-autocomplete>
    </mat-form-field>
  `,
  styles: [`
    .full-width { width: 100%; }
  `]
})
export class CustomAutocompleteComponent implements OnInit {
  @Input() options: string[] = [];
  @Input() placeholder: string = 'Select or type';
  @Input() multiSelect: boolean = false;

  inputControl = new FormControl('');
  filteredOptions!: Observable<string[]>;
  selectedValues: string[] = [];

  ngOnInit() {
    this.filteredOptions = this.inputControl.valueChanges.pipe(
      startWith(''),
      map(value => this._filter(value || ''))
    );
  }

  displayFn(value: string): string {
    return value || '';
  }

  private _filter(value: string): string[] {
    const filterValue = value.toLowerCase();
    return this.options.filter(option => option.toLowerCase().includes(filterValue));
  }

  addCustomValue(event: any) {
    const input = event.input;
    const value = event.value;

    if ((value || '').trim()) {
      if (!this.selectedValues.includes(value.trim())) {
        this.selectedValues.push(value.trim());
      }
    }

    if (input) {
      input.value = '';
    }
    this.inputControl.setValue(null);
  }

  onOptionSelected(event: MatAutocompleteSelectedEvent) {
    const value = event.option.viewValue;
    if (!this.selectedValues.includes(value)) {
      this.selectedValues.push(value);
    }
    this.inputControl.setValue('');
  }

  remove(value: string): void {
    const index = this.selectedValues.indexOf(value);
    if (index >= 0) {
      this.selectedValues.splice(index, 1);
    }
  }
}
```

**4. Use the Autocomplete Component:**

In your template, utilize the component and configure it for single or multi-select mode:

```html
<app-custom-autocomplete
  [options]="['Option 1', 'Option 2', 'Option 3']"
  placeholder="Choose an option"
  [multiSelect]="true"
></app-custom-autocomplete>
```

**Explanation:**

- **`<mat-chip-grid>`**: Serves as the container for the chips and input field, suitable for input patterns where users can add and remove chips dynamically.
- **`<mat-chip-row>`**: Represents each chip within the grid, supporting selection and removal.
- **`matChipInputFor`**: Associates the input field with the chip grid, enabling the addition of new chips.
- **`addCustomValue()`**: Handles the addition of custom values not present in the predefined options.
- **`onOptionSelected()`**: Manages the selection of options from the autocomplete dropdown.
- **`remove()`**: Allows for the removal of chips from the selection.

This implementation aligns with Angular Material 18's updated components and provides a flexible autocomplete textbox that supports both single and multi-select functionalities, including the addition of custom values. 

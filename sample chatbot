// chatbot.component.ts
import { Component, OnInit, ViewChild, ElementRef, AfterViewChecked } from '@angular/core';

export interface ChatMessage {
  id: string;
  sender: 'bot' | 'user';
  text: string;
  timestamp: Date;
}

@Component({
  selector: 'app-chatbot',
  templateUrl: './chatbot.component.html',
  styleUrls: ['./chatbot.component.css']
})
export class ChatbotComponent implements OnInit, AfterViewChecked {
  @ViewChild('chatMessages', { static: false }) chatMessagesRef!: ElementRef;
  
  messages: ChatMessage[] = [];
  currentMessage: string = '';
  isTyping: boolean = false;

  private botResponses = [
    "I understand your question. Let me analyze the data for you.",
    "That's a great point! Based on the current metrics, I'd suggest focusing on user engagement.",
    "I can help you with that. Would you like me to generate a detailed report?",
    "Interesting observation! The trends show positive growth in that area.",
    "Let me check the latest data to provide you with accurate insights.",
    "Based on your dashboard data, I can see several opportunities for improvement.",
    "I'm here to help! What specific aspect would you like me to focus on?",
    "That's an excellent question. Let me provide you with some actionable recommendations."
  ];

  ngOnInit(): void {
    this.initializeChat();
  }

  ngAfterViewChecked(): void {
    this.scrollToBottom();
  }

  private initializeChat(): void {
    // Initialize with example conversation
    this.messages = [
      {
        id: this.generateId(),
        sender: 'bot',
        text: "Hello! I'm your AI assistant. How can I help you today?",
        timestamp: new Date(Date.now() - 300000) // 5 minutes ago
      },
      {
        id: this.generateId(),
        sender: 'user',
        text: "Can you help me understand the user statistics?",
        timestamp: new Date(Date.now() - 240000) // 4 minutes ago
      },
      {
        id: this.generateId(),
        sender: 'bot',
        text: "Of course! Based on your dashboard data, you have 1,234 total users with an 89% active session rate. Your conversion rate of 67% is quite good. Would you like me to analyze any specific metrics?",
        timestamp: new Date(Date.now() - 180000) // 3 minutes ago
      },
      {
        id: this.generateId(),
        sender: 'user',
        text: "What about the inactive users?",
        timestamp: new Date(Date.now() - 120000) // 2 minutes ago
      },
      {
        id: this.generateId(),
        sender: 'bot',
        text: "I can see you have some inactive users like Tom Brown who hasn't logged in for a week. I'd recommend sending re-engagement emails or special offers to win them back.",
        timestamp: new Date(Date.now() - 60000) // 1 minute ago
      }
    ];
  }

  sendMessage(): void {
    const message = this.currentMessage.trim();
    
    if (message && !this.isTyping) {
      // Add user message
      this.messages.push({
        id: this.generateId(),
        sender: 'user',
        text: message,
        timestamp: new Date()
      });

      this.currentMessage = '';
      this.isTyping = true;

      // Simulate bot typing delay
      setTimeout(() => {
        this.addBotResponse();
        this.isTyping = false;
      }, 1000 + Math.random() * 2000); // 1-3 second delay
    }
  }

  onKeyPress(event: KeyboardEvent): void {
    if (event.key === 'Enter' && !event.shiftKey) {
      event.preventDefault();
      this.sendMessage();
    }
  }

  private addBotResponse(): void {
    const randomResponse = this.botResponses[Math.floor(Math.random() * this.botResponses.length)];
    
    this.messages.push({
      id: this.generateId(),
      sender: 'bot',
      text: randomResponse,
      timestamp: new Date()
    });
  }

  private generateId(): string {
    return Math.random().toString(36).substr(2, 9);
  }

  private scrollToBottom(): void {
    if (this.chatMessagesRef) {
      const element = this.chatMessagesRef.nativeElement;
      element.scrollTop = element.scrollHeight;
    }
  }

  getTimeString(timestamp: Date): string {
    const now = new Date();
    const diffInMinutes = Math.floor((now.getTime() - timestamp.getTime()) / (1000 * 60));
    
    if (diffInMinutes === 0) {
      return 'Just now';
    } else if (diffInMinutes === 1) {
      return '1 minute ago';
    } else if (diffInMinutes < 60) {
      return `${diffInMinutes} minutes ago`;
    } else if (diffInMinutes < 1440) {
      const hours = Math.floor(diffInMinutes / 60);
      return hours === 1 ? '1 hour ago' : `${hours} hours ago`;
    } else {
      return timestamp.toLocaleDateString();
    }
  }
}



<!-- chatbot.component.html -->
<div class="chatbot-container">
  <!-- Chat Header -->
  <div class="chat-header">
    <div class="header-info">
      <div class="bot-avatar">ü§ñ</div>
      <div class="header-text">
        <h3>AI Assistant</h3>
        <span class="status-indicator">Online</span>
      </div>
    </div>
  </div>

  <!-- Chat Messages -->
  <div class="chat-messages" #chatMessages>
    <div *ngFor="let message of messages; trackBy: trackByMessageId" 
         class="message" 
         [ngClass]="message.sender">
      
      <div class="message-avatar">
        {{ message.sender === 'bot' ? 'ü§ñ' : 'üë§' }}
      </div>
      
      <div class="message-content">
        <div class="message-bubble">
          {{ message.text }}
        </div>
        <div class="message-time">
          {{ getTimeString(message.timestamp) }}
        </div>
      </div>
    </div>

    <!-- Typing Indicator -->
    <div *ngIf="isTyping" class="message bot typing-message">
      <div class="message-avatar">ü§ñ</div>
      <div class="message-content">
        <div class="message-bubble typing-indicator">
          <div class="typing-dots">
            <span></span>
            <span></span>
            <span></span>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Chat Input -->
  <div class="chat-input-container">
    <div class="input-wrapper">
      <input 
        type="text" 
        class="chat-input" 
        [(ngModel)]="currentMessage"
        (keypress)="onKeyPress($event)"
        placeholder="Type your message..."
        [disabled]="isTyping"
        maxlength="500">
      
      <button 
        class="send-button" 
        (click)="sendMessage()"
        [disabled]="!currentMessage.trim() || isTyping"
        [class.sending]="isTyping">
        <span *ngIf="!isTyping">‚û§</span>
        <div *ngIf="isTyping" class="loading-spinner"></div>
      </button>
    </div>
    
    <div class="input-info">
      <span class="char-count">{{ currentMessage.length }}/500</span>
    </div>
  </div>
</div>



/* chatbot.component.css */
.chatbot-container {
  display: flex;
  flex-direction: column;
  height: 100%;
  background-color: #ffffff;
  border-radius: 8px;
  overflow: hidden;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

/* Chat Header */
.chat-header {
  padding: 16px 20px;
  border-bottom: 1px solid #e0e0e0;
  background-color: #f8f9fa;
}

.header-info {
  display: flex;
  align-items: center;
  gap: 12px;
}

.bot-avatar {
  width: 40px;
  height: 40px;
  border-radius: 50%;
  background: linear-gradient(135deg, #007bff, #0056b3);
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 18px;
  box-shadow: 0 2px 4px rgba(0, 123, 255, 0.3);
}

.header-text h3 {
  margin: 0;
  font-size: 16px;
  font-weight: 600;
  color: #333;
}

.status-indicator {
  font-size: 12px;
  color: #28a745;
  font-weight: 500;
}

.status-indicator::before {
  content: '‚óè';
  margin-right: 4px;
}

/* Chat Messages */
.chat-messages {
  flex: 1;
  overflow-y: auto;
  padding: 20px;
  scroll-behavior: smooth;
}

.message {
  margin-bottom: 20px;
  display: flex;
  align-items: flex-start;
  gap: 12px;
  animation: fadeInUp 0.3s ease-out;
}

.message.user {
  flex-direction: row-reverse;
}

.message-avatar {
  width: 32px;
  height: 32px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 14px;
  font-weight: bold;
  flex-shrink: 0;
  transition: transform 0.2s ease;
}

.message.bot .message-avatar {
  background: linear-gradient(135deg, #007bff, #0056b3);
  color: white;
  box-shadow: 0 2px 4px rgba(0, 123, 255, 0.2);
}

.message.user .message-avatar {
  background: linear-gradient(135deg, #28a745, #1e7e34);
  color: white;
  box-shadow: 0 2px 4px rgba(40, 167, 69, 0.2);
}

.message-avatar:hover {
  transform: scale(1.05);
}

.message-content {
  max-width: 75%;
  display: flex;
  flex-direction: column;
}

.message.user .message-content {
  align-items: flex-end;
}

.message-bubble {
  padding: 12px 16px;
  border-radius: 18px;
  font-size: 14px;
  line-height: 1.5;
  word-wrap: break-word;
  position: relative;
  transition: all 0.2s ease;
}

.message.bot .message-bubble {
  background: #f1f3f5;
  color: #333;
  border-bottom-left-radius: 6px;
}

.message.user .message-bubble {
  background: linear-gradient(135deg, #007bff, #0056b3);
  color: white;
  border-bottom-right-radius: 6px;
}

.message-bubble:hover {
  transform: translateY(-1px);
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

.message-time {
  font-size: 11px;
  color: #666;
  margin-top: 6px;
  padding: 0 4px;
}

.message.user .message-time {
  text-align: right;
}

/* Typing Indicator */
.typing-message {
  opacity: 0.8;
}

.typing-indicator {
  background: #f1f3f5 !important;
  padding: 16px 20px !important;
}

.typing-dots {
  display: flex;
  gap: 4px;
  align-items: center;
}

.typing-dots span {
  width: 8px;
  height: 8px;
  border-radius: 50%;
  background-color: #007bff;
  animation: typingDot 1.4s infinite ease-in-out;
}

.typing-dots span:nth-child(1) { animation-delay: -0.32s; }
.typing-dots span:nth-child(2) { animation-delay: -0.16s; }
.typing-dots span:nth-child(3) { animation-delay: 0s; }

@keyframes typingDot {
  0%, 80%, 100% {
    transform: scale(0.8);
    opacity: 0.5;
  }
  40% {
    transform: scale(1);
    opacity: 1;
  }
}

/* Chat Input */
.chat-input-container {
  padding: 16px 20px;
  border-top: 1px solid #e0e0e0;
  background-color: #ffffff;
}

.input-wrapper {
  display: flex;
  gap: 12px;
  align-items: flex-end;
}

.chat-input {
  flex: 1;
  padding: 12px 16px;
  border: 2px solid #e0e0e0;
  border-radius: 20px;
  outline: none;
  font-size: 14px;
  font-family: inherit;
  resize: none;
  transition: all 0.2s ease;
  background-color: #f8f9fa;
}

.chat-input:focus {
  border-color: #007bff;
  background-color: #ffffff;
  box-shadow: 0 0 0 3px rgba(0, 123, 255, 0.1);
}

.chat-input:disabled {
  background-color: #f1f3f5;
  cursor: not-allowed;
  opacity: 0.7;
}

.send-button {
  background: linear-gradient(135deg, #007bff, #0056b3);
  color: white;
  border: none;
  border-radius: 50%;
  width: 44px;
  height: 44px;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  transition: all 0.2s ease;
  box-shadow: 0 2px 4px rgba(0, 123, 255, 0.2);
  font-size: 16px;
}

.send-button:hover:not(:disabled) {
  background: linear-gradient(135deg, #0056b3, #004085);
  transform: scale(1.05);
  box-shadow: 0 4px 8px rgba(0, 123, 255, 0.3);
}

.send-button:active:not(:disabled) {
  transform: scale(0.95);
}

.send-button:disabled {
  background: #ccc;
  cursor: not-allowed;
  transform: none;
  box-shadow: none;
}

.send-button.sending {
  animation: pulse 1s infinite;
}

.loading-spinner {
  width: 16px;
  height: 16px;
  border: 2px solid rgba(255, 255, 255, 0.3);
  border-radius: 50%;
  border-top-color: white;
  animation: spin 0.8s linear infinite;
}

@keyframes spin {
  to { transform: rotate(360deg); }
}

@keyframes pulse {
  0%, 100% { opacity: 1; }
  50% { opacity: 0.7; }
}

.input-info {
  display: flex;
  justify-content: flex-end;
  margin-top: 8px;
}

.char-count {
  font-size: 11px;
  color: #666;
}

/* Animations */
@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* Scrollbar Styling */
.chat-messages::-webkit-scrollbar {
  width: 6px;
}

.chat-messages::-webkit-scrollbar-track {
  background: #f1f1f1;
  border-radius: 3px;
}

.chat-messages::-webkit-scrollbar-thumb {
  background: #c1c1c1;
  border-radius: 3px;
}

.chat-messages::-webkit-scrollbar-thumb:hover {
  background: #a8a8a8;
}

/* Responsive Design */
@media (max-width: 768px) {
  .chatbot-container {
    height: 100vh;
    border-radius: 0;
  }
  
  .chat-messages {
    padding: 16px;
  }
  
  .message-content {
    max-width: 85%;
  }
  
  .chat-input-container {
    padding: 12px 16px;
  }
}

import asyncio
import json
import sqlite3
from datetime import datetime
from typing import Dict, List, Optional, Any
from uuid import uuid4, UUID

import chainlit as cl
from chainlit.data import BaseDataLayer
from chainlit.types import (
    ThreadDict, 
    StepDict, 
    ElementDict, 
    Feedback, 
    PersistedUser, 
    User,
    PaginatedResponse,
    Pagination
)

# ... (keep all your existing SQLite model and data layer code) ...

@cl.data_layer
def get_data_layer():
    """Initialize the SQLite data layer."""
    return SQLiteDataLayer(database_path="chainlit_chat_history.db")

@cl.on_chat_start
async def on_chat_start():
    """Initialize chat session with thread creation"""
    # Get or create user
    user = cl.user_session.get("user")
    data_layer = get_data_layer()
    
    if user:
        # Create or get user in database
        persisted_user = await data_layer.create_user(user)
        cl.user_session.set("persisted_user", persisted_user)
    else:
        # Create anonymous user
        anonymous_user = User(identifier=f"anonymous_{str(uuid4())[:8]}")
        persisted_user = await data_layer.create_user(anonymous_user)
        cl.user_session.set("persisted_user", persisted_user)
    
    # Create a new thread for this chat session
    thread_id = str(uuid4())
    thread_dict = ThreadDict(
        id=thread_id,
        name=f"Chat {datetime.now().strftime('%Y-%m-%d %H:%M')}",
        userId=persisted_user.id if persisted_user else None,
        userIdentifier=persisted_user.identifier if persisted_user else None,
        createdAt=datetime.utcnow().isoformat(),
        metadata={},
        tags=[],
        steps=[]
    )
    
    # Create thread in database
    await data_layer.create_thread(thread_dict)
    
    # Store thread ID in session
    cl.user_session.set("thread_id", thread_id)
    
    # Create and send welcome message
    welcome_step = StepDict(
        id=str(uuid4()),
        name="Welcome Message",
        type="assistant_message",
        threadId=thread_id,
        output="Hello! I'm your AI assistant with persistent memory. Your conversation history will be saved!",
        createdAt=datetime.utcnow().isoformat(),
        metadata={}
    )
    
    # Save welcome message as step
    await data_layer.create_step(welcome_step)
    
    # Send welcome message
    await cl.Message(
        content="Hello! I'm your AI assistant with persistent memory. Your conversation history will be saved!"
    ).send()

@cl.on_message
async def on_message(message: cl.Message):
    """Handle incoming messages with proper persistence"""
    thread_id = cl.user_session.get("thread_id")
    data_layer = get_data_layer()
    
    if not thread_id:
        await cl.Message(content="Error: No active thread found.").send()
        return
    
    # Save user message as step
    user_step = StepDict(
        id=str(uuid4()),
        name="User Message",
        type="user_message",
        threadId=thread_id,
        input=message.content,
        createdAt=datetime.utcnow().isoformat(),
        metadata={"author": "user"}
    )
    await data_layer.create_step(user_step)
    
    # Process the message (replace with your actual AI logic)
    response_content = f"You said: {message.content}"
    
    # Save assistant response as step
    assistant_step = StepDict(
        id=str(uuid4()),
        name="Assistant Response",
        type="assistant_message",
        threadId=thread_id,
        output=response_content,
        createdAt=datetime.utcnow().isoformat(),
        metadata={"author": "assistant"}
    )
    await data_layer.create_step(assistant_step)
    
    # Send response
    await cl.Message(content=response_content).send()

@cl.on_chat_resume
async def on_chat_resume(thread: ThreadDict):
    """Resume a previous conversation"""
    data_layer = get_data_layer()
    
    # Set the thread ID in session
    cl.user_session.set("thread_id", thread["id"])
    
    # Get full thread with steps
    full_thread = await data_layer.get_thread(thread["id"])
    
    if full_thread and full_thread.get("steps"):
        # Display conversation history
        steps = sorted(full_thread["steps"], key=lambda x: x.get("createdAt", ""))
        
        for step in steps:
            if step.get("type") == "user_message" and step.get("input"):
                # Don't re-send user messages, they're already in history
                pass
            elif step.get("type") == "assistant_message" and step.get("output"):
                # Don't re-send assistant messages, they're already in history
                pass
        
        await cl.Message(
            content="Welcome back! Your conversation has been resumed. You can continue where you left off."
        ).send()
    else:
        await cl.Message(
            content="Welcome back! Starting a fresh conversation."
        ).send()

# Add method to list user's threads (for debugging/admin purposes)
async def list_user_threads(user_identifier: str, limit: int = 10):
    """List threads for a specific user"""
    data_layer = get_data_layer()
    
    pagination = Pagination(first=0, cursor=limit)
    filters = {"userIdentifier": user_identifier}
    
    result = await data_layer.list_threads(pagination, filters)
    return result.data

# Add debugging command (optional)
@cl.on_message
async def debug_command(message: cl.Message):
    """Handle debug commands"""
    if message.content.startswith("/debug"):
        thread_id = cl.user_session.get("thread_id")
        persisted_user = cl.user_session.get("persisted_user")
        
        debug_info = f"""
**Debug Information:**
- Thread ID: {thread_id}
- User: {persisted_user.identifier if persisted_user else 'None'}
- User ID: {persisted_user.id if persisted_user else 'None'}
        """
        
        if thread_id:
            data_layer = get_data_layer()
            thread = await data_layer.get_thread(thread_id)
            if thread:
                debug_info += f"- Thread Steps: {len(thread.get('steps', []))}"
        
        await cl.Message(content=debug_info).send()
        return True
    return False

# Modified message handler to include debug support
@cl.on_message
async def on_message_with_debug(message: cl.Message):
    """Enhanced message handler with debug support"""
    # Check for debug commands first
    if await debug_command(message):
        return
    
    # Handle normal messages
    await on_message(message)




# Add this method to your SQLiteDataLayer class

async def create_thread(self, thread_dict: ThreadDict):
    """Create a new thread"""
    loop = asyncio.get_event_loop()
    return await loop.run_in_executor(None, self._create_thread_sync, thread_dict)

def _create_thread_sync(self, thread_dict: ThreadDict):
    """Synchronous thread creation"""
    with self.get_session() as session:
        # Check if thread already exists
        existing_thread = session.query(SQLiteThread).filter(SQLiteThread.id == thread_dict["id"]).first()
        if existing_thread:
            return existing_thread
        
        # Create new thread
        thread = SQLiteThread(
            id=thread_dict["id"],
            name=thread_dict.get("name"),
            user_id=thread_dict.get("userId"),
            user_identifier=thread_dict.get("userIdentifier"),
            tags=thread_dict.get("tags", []),
            metadata=thread_dict.get("metadata", {}),
            created_at=datetime.fromisoformat(thread_dict["createdAt"]) if thread_dict.get("createdAt") else datetime.utcnow()
        )
        session.add(thread)
        
        try:
            session.commit()
            session.refresh(thread)
            return thread
        except Exception as e:
            session.rollback()
            # Check if thread was created by another process
            existing_thread = session.query(SQLiteThread).filter(SQLiteThread.id == thread_dict["id"]).first()
            if existing_thread:
                return existing_thread
            raise e



cl.config.enable_chat_history = True


import asyncio
import json
import sqlite3
from datetime import datetime
from typing import Dict, List, Optional, Any
from uuid import uuid4, UUID

import chainlit as cl
from chainlit.data import BaseDataLayer
from chainlit.types import (
    ThreadDict, 
    StepDict, 
    ElementDict, 
    Feedback, 
    PersistedUser, 
    User,
    PaginatedResponse,
    Pagination
)

# ... (include all your SQLiteDataLayer class code here) ...

# Initialize the data layer BEFORE defining the handlers
data_layer = SQLiteDataLayer(database_path="chainlit_chat_history.db")

@cl.data_layer
def get_data_layer():
    """Register the SQLite data layer with Chainlit."""
    return data_layer

@cl.on_chat_start
async def on_chat_start():
    """Initialize chat session with thread creation"""
    print("Chat started - creating new thread")  # Debug log
    
    # Get current user or create anonymous user
    user = cl.user_session.get("user")
    
    if user:
        persisted_user = await data_layer.create_user(user)
        print(f"Created/found user: {persisted_user.identifier}")
    else:
        # Create anonymous user
        anonymous_user = User(identifier=f"anonymous_{str(uuid4())[:8]}")
        persisted_user = await data_layer.create_user(anonymous_user)
        print(f"Created anonymous user: {persisted_user.identifier}")
    
    cl.user_session.set("persisted_user", persisted_user)
    
    # Create a new thread for this chat session
    thread_id = str(uuid4())
    print(f"Creating thread: {thread_id}")
    
    thread_dict = ThreadDict(
        id=thread_id,
        name=f"Chat {datetime.now().strftime('%Y-%m-%d %H:%M')}",
        userId=persisted_user.id,
        userIdentifier=persisted_user.identifier,
        createdAt=datetime.utcnow().isoformat(),
        metadata={},
        tags=[],
        steps=[]
    )
    
    # Create thread in database
    await data_layer.create_thread(thread_dict)
    
    # Store thread ID in session
    cl.user_session.set("thread_id", thread_id)
    print(f"Thread {thread_id} created and stored in session")
    
    # Send welcome message
    await cl.Message(
        content="Hello! I'm your AI assistant with persistent memory. Your conversation history will be saved!"
    ).send()

@cl.on_message
async def on_message(message: cl.Message):
    """Handle incoming messages with proper persistence"""
    thread_id = cl.user_session.get("thread_id")
    persisted_user = cl.user_session.get("persisted_user")
    
    print(f"Received message in thread {thread_id}: {message.content[:50]}...")
    
    if not thread_id:
        await cl.Message(content="Error: No active thread found. Please refresh the page.").send()
        return
    
    # Handle debug command
    if message.content.startswith("/debug"):
        debug_info = f"""**Debug Information:**
- Thread ID: {thread_id}
- User: {persisted_user.identifier if persisted_user else 'None'}
- User ID: {persisted_user.id if persisted_user else 'None'}
"""
        
        # Get thread info
        thread = await data_layer.get_thread(thread_id)
        if thread:
            debug_info += f"- Thread found with {len(thread.get('steps', []))} steps"
        else:
            debug_info += "- Thread not found in database!"
        
        await cl.Message(content=debug_info).send()
        return
    
    # Save user message as step
    user_step_id = str(uuid4())
    user_step = StepDict(
        id=user_step_id,
        name="User Message",
        type="user_message",
        threadId=thread_id,
        input=message.content,
        output="",  # User messages don't have output
        createdAt=datetime.utcnow().isoformat(),
        metadata={"author": "user"}
    )
    
    try:
        await data_layer.create_step(user_step)
        print(f"Saved user step: {user_step_id}")
    except Exception as e:
        print(f"Error saving user step: {e}")
    
    # Process the message (replace with your actual AI logic)
    response_content = f"You said: {message.content}\n\nThis response is being saved to the database."
    
    # Save assistant response as step
    assistant_step_id = str(uuid4())
    assistant_step = StepDict(
        id=assistant_step_id,
        name="Assistant Response",
        type="assistant_message",
        threadId=thread_id,
        input="",  # Assistant messages don't have input
        output=response_content,
        createdAt=datetime.utcnow().isoformat(),
        metadata={"author": "assistant"}
    )
    
    try:
        await data_layer.create_step(assistant_step)
        print(f"Saved assistant step: {assistant_step_id}")
    except Exception as e:
        print(f"Error saving assistant step: {e}")
    
    # Send response
    await cl.Message(content=response_content).send()

@cl.on_chat_resume
async def on_chat_resume(thread: ThreadDict):
    """Resume a previous conversation"""
    print(f"Resuming thread: {thread['id']}")
    
    # Set the thread ID in session
    cl.user_session.set("thread_id", thread["id"])
    
    # Get user info if available
    if thread.get("userIdentifier"):
        user = await data_layer.get_user(thread["userIdentifier"])
        if user:
            cl.user_session.set("persisted_user", user)
    
    # Get full thread with steps for verification
    full_thread = await data_layer.get_thread(thread["id"])
    
    if full_thread:
        step_count = len(full_thread.get("steps", []))
        print(f"Resumed thread has {step_count} steps")
        
        await cl.Message(
            content=f"Welcome back! Your conversation has been resumed. Found {step_count} previous messages."
        ).send()
    else:
        print("Warning: Could not load thread details")
        await cl.Message(
            content="Welcome back! Starting fresh - could not load previous conversation."
        ).send()

if __name__ == "__main__":
    cl.run()



persist_user_session = true in config.toml

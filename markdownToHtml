function escapeHtml(html) {
  return html.replace(/&/g, '&amp;')
             .replace(/</g, '&lt;')
             .replace(/>/g, '&gt;')
             .replace(/"/g, '&quot;')
             .replace(/'/g, '&#39;');
}

function markdownToHtml(markdown) {
  if (!markdown) return '';

  let html = markdown;

  // Headers
  html = html.replace(/^###### (.+)$/gm, '<h6>$1</h6>');
  html = html.replace(/^##### (.+)$/gm, '<h5>$1</h5>');
  html = html.replace(/^#### (.+)$/gm, '<h4>$1</h4>');
  html = html.replace(/^### (.+)$/gm, '<h3>$1</h3>');
  html = html.replace(/^## (.+)$/gm, '<h2>$1</h2>');
  html = html.replace(/^# (.+)$/gm, '<h1>$1</h1>');

  // Tables (with empty cell handling)
  html = html.replace(/\|(.+)\|\n\|(.+)\|\n((?:\|.*\|\n?)*)/g, function(_, header, separator, rows) {
    const headerCells = header.split('|').map(cell => cell.trim());
    const alignments = separator.split('|').map(cell => {
      const trimmed = cell.trim();
      if (trimmed.startsWith(':') && trimmed.endsWith(':')) return 'center';
      if (trimmed.endsWith(':')) return 'right';
      return 'left';
    });

    const headerRow = '<tr>' + headerCells.map(cell => `<th>${cell}</th>`).join('') + '</tr>';

    const dataRows = rows.trim().split('\n').map(row => {
      if (!row.trim()) return '';
      let cells = row.split('|').map(cell => cell.trim());
      while (cells.length < headerCells.length) cells.push('');
      return '<tr>' + cells.map((cell, index) => {
        const align = alignments[index] || 'left';
        return `<td style="text-align: ${align}">${cell}</td>`;
      }).join('') + '</tr>';
    }).filter(row => row).join('');

    return `<table>${headerRow}${dataRows}</table>`;
  });

  // Fenced code blocks
  html = html.replace(/```(\w+)?\n([\s\S]*?)```/g, (match, lang, code) => {
    const classAttr = lang ? ` class="language-${lang}"` : '';
    return `<pre><code${classAttr}>${escapeHtml(code)}</code></pre>`;
  });

  // Inline code
  html = html.replace(/`(.+?)`/g, '<code>$1</code>');

  // Bold, italic, strikethrough
  html = html.replace(/\*\*\*(.+?)\*\*\*/g, '<strong><em>$1</em></strong>');
  html = html.replace(/\*\*(.+?)\*\*/g, '<strong>$1</strong>');
  html = html.replace(/\*(?!\*)(.+?)\*/g, '<em>$1</em>');
  html = html.replace(/~~(.+?)~~/g, '<del>$1</del>');

  // Links
  html = html.replace(/\[([^\]]+)]\(([^)]+)\)/g, '<a href="$2">$1</a>');

  // Task lists
  html = html.replace(/^- \[x\] (.+)$/gim, '<li><input type="checkbox" checked disabled> $1</li>');
  html = html.replace(/^- \[ \] (.+)$/gim, '<li><input type="checkbox" disabled> $1</li>');

  // List items
  html = html.replace(/^- (.+)$/gm, '<li>$1</li>');
  html = html.replace(/^\d+\. (.+)$/gm, '<li>$1</li>');

  // Blockquotes
  html = html.replace(/^> (.+)$/gm, '<blockquote>$1</blockquote>');

  // Horizontal rule
  html = html.replace(/^---$/gm, '<hr>');

  // Wrap lists
  html = html.replace(/((<li>.*<\/li>\n*)+)/g, match => {
    const isOrdered = /^\d+\./m.test(match);
    const tag = isOrdered ? 'ol' : 'ul';
    return `<${tag}>${match}</${tag}>`;
  });

  // Paragraphs and line breaks
  html = html.replace(/\n{2,}/g, '</p><p>');
  html = html.replace(/(?<!\n)\n(?!\n)/g, '<br>');
  html = '<p>' + html + '</p>';

  // Cleanup paragraph wrapping for block elements
  const blockTags = ['h[1-6]', 'ul', 'ol', 'blockquote', 'pre', 'hr', 'table'];
  blockTags.forEach(tag => {
    const open = new RegExp(`<p>(<${tag}>)`, 'g');
    const close = new RegExp(`(<\/${tag}>)<\/p>`, 'g');
    html = html.replace(open, '$1');
    html = html.replace(close, '$1');
  });

  html = html.replace(/<p><\/p>/g, '');

  return html.trim();
}

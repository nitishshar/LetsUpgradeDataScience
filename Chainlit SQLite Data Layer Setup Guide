# Chainlit SQLite Data Layer Setup Guide

## Installation

First, install the required dependencies:

```bash
pip install chainlit sqlalchemy
```

## File Structure

Create the following files in your project:

```
your_project/
â”œâ”€â”€ sqlite_data_layer.py  # The data layer implementation
â”œâ”€â”€ app.py               # Your main Chainlit application
â””â”€â”€ chainlit_chat_history.db  # SQLite database (created automatically)
```

## Usage

### 1. Save the Data Layer Implementation

Save the complete SQLite data layer implementation as `sqlite_data_layer.py`.

### 2. Create Your Chainlit App

Create `app.py` with the following content:

```python
import chainlit as cl
from sqlite_data_layer import SQLiteDataLayer

# Initialize the data layer
@cl.data_layer
def get_data_layer():
    return SQLiteDataLayer(database_path="chainlit_chat_history.db")

@cl.on_chat_start
async def on_chat_start():
    """Initialize chat session"""
    await cl.Message(
        content="Hello! I'm your AI assistant with persistent chat history. Your conversations will be saved and can be resumed later!"
    ).send()

@cl.on_message
async def on_message(message: cl.Message):
    """Handle incoming messages"""
    # Your AI logic here
    response = f"You said: {message.content}"
    
    await cl.Message(content=response).send()

# Optional: Add conversation resumption functionality
@cl.action_callback("resume_conversation")
async def resume_conversation(action):
    """Resume a previous conversation"""
    thread_id = action.value
    data_layer = get_data_layer()
    thread = await data_layer.get_thread(thread_id)
    
    if thread and thread.get("steps"):
        await cl.Message(
            content="Here's your conversation history:"
        ).send()
        
        for step in thread["steps"]:
            if step.get("input"):
                await cl.Message(
                    content=f"**You:** {step['input']}",
                    author="User"
                ).send()
            if step.get("output"):
                await cl.Message(
                    content=f"**Assistant:** {step['output']}",
                    author="Assistant"
                ).send()
        
        await cl.Message(
            content="Conversation resumed! Continue where you left off."
        ).send()
    else:
        await cl.Message(
            content="No conversation history found."
        ).send()
```

### 3. Run Your Application

```bash
chainlit run app.py
```

## Key Features

### 1. **Automatic Chat History**
- All conversations are automatically saved to the SQLite database
- No additional configuration required
- Chat history persists across sessions

### 2. **User Management**
- Users are automatically created and managed
- Each user's conversations are tracked separately
- User metadata can be stored and retrieved

### 3. **Thread Management**
- Each conversation is stored as a "thread"
- Threads contain all messages (steps) in chronological order
- Metadata and tags can be attached to threads

### 4. **Message Persistence**
- All user inputs and AI responses are saved
- Message timestamps, metadata, and relationships are preserved
- Support for different message types (text, images, files, etc.)

### 5. **Feedback System**
- User feedback on messages is stored
- Feedback can be queried and analyzed
- Support for ratings and comments

## Database Schema

The implementation creates the following tables:

- **users**: Store user information and metadata
- **threads**: Store conversation threads
- **steps**: Store individual messages/steps in conversations
- **elements**: Store files, images, and other attachments
- **feedbacks**: Store user feedback on messages
- **chat_sessions**: Store session information

## Advanced Usage

### Querying Chat History

```python
# Get all threads for a user
data_layer = get_data_layer()
threads = await data_layer.list_threads(
    pagination=Pagination(first=0, cursor=10),
    filters={"userIdentifier": "user123"}
)

# Get specific conversation
thread = await data_layer.get_thread("thread_id_here")
if thread:
    print(f"Thread: {thread['name']}")
    for step in thread.get('steps', []):
        print(f"  {step['type']}: {step.get('input') or step.get('output')}")
```

### Resume Conversation Feature

Add this to your app to allow users to resume previous conversations:

```python
@cl.on_chat_start
async def on_chat_start():
    # Check if user wants to resume a conversation
    user = cl.user_session.get("user")
    if user:
        data_layer = get_data_layer()
        
        # Get recent threads for this user
        threads = await data_layer.list_threads(
            pagination=Pagination(first=0, cursor=5),
            filters={"userIdentifier": user.identifier}
        )
        
        if threads.data:
            # Show option to resume recent conversations
            actions = []
            for thread in threads.data:
                actions.append(
                    cl.Action(
                        name="resume_conversation",
                        value=thread["id"],
                        label=f"Resume: {thread.get('name', 'Untitled')} ({thread.get('createdAt', '')})"
                    )
                )
            
            await cl.Message(
                content="Welcome back! You can resume a previous conversation or start a new one:",
                actions=actions
            ).send()
        else:
            await cl.Message(content="Welcome! Let's start a new conversation.").send()
    else:
        await cl.Message(content="Hello! Let's start chatting.").send()
```

### Custom Thread Names

Automatically name threads based on conversation content:

```python
import asyncio
from datetime import datetime

async def update_thread_name(thread_id: str, first_message: str):
    """Update thread name based on first message"""
    data_layer = get_data_layer()
    
    # Generate a meaningful name from the first message
    name = first_message[:50] + "..." if len(first_message) > 50 else first_message
    name = name.replace('\n', ' ').strip()
    
    await data_layer.update_thread(
        thread_id=thread_id,
        name=name,
        metadata={"auto_named": True, "created": datetime.utcnow().isoformat()}
    )

@cl.on_message
async def on_message(message: cl.Message):
    """Handle messages with thread naming"""
    # Check if this is the first message in the thread
    thread_id = cl.context.session.thread_id
    if thread_id and len(cl.user_session.get("message_count", 0)) == 0:
        # This is likely the first message, name the thread
        asyncio.create_task(update_thread_name(thread_id, message.content))
    
    # Increment message count
    count = cl.user_session.get("message_count", 0)
    cl.user_session.set("message_count", count + 1)
    
    # Your AI response logic here
    response = f"You said: {message.content}"
    await cl.Message(content=response).send()
```

### Search Conversations

Add search functionality to find previous conversations:

```python
@cl.action_callback("search_conversations")
async def search_conversations(action):
    """Search through conversation history"""
    search_term = action.value.lower()
    data_layer = get_data_layer()
    user = cl.user_session.get("user")
    
    if not user:
        await cl.Message(content="Please log in to search conversations.").send()
        return
    
    # Get all threads for user
    threads = await data_layer.list_threads(
        pagination=Pagination(first=0, cursor=100),
        filters={"userIdentifier": user.identifier}
    )
    
    matching_threads = []
    for thread_data in threads.data:
        thread = await data_layer.get_thread(thread_data["id"])
        if thread:
            # Search in thread name and messages
            thread_text = (thread.get("name", "") + " ").lower()
            for step in thread.get("steps", []):
                thread_text += (step.get("input", "") + " " + step.get("output", "") + " ").lower()
            
            if search_term in thread_text:
                matching_threads.append(thread)
    
    if matching_threads:
        actions = []
        for thread in matching_threads[:10]:  # Limit to 10 results
            actions.append(
                cl.Action(
                    name="resume_conversation",
                    value=thread["id"],
                    label=f"ðŸ“„ {thread.get('name', 'Untitled')} - {thread.get('createdAt', '')}"
                )
            )
        
        await cl.Message(
            content=f"Found {len(matching_threads)} conversations matching '{search_term}':",
            actions=actions
        ).send()
    else:
        await cl.Message(
            content=f"No conversations found matching '{search_term}'."
        ).send()
```

## Configuration Options

### Database Path
```python
# Use different database for different environments
import os

db_path = os.getenv("CHAINLIT_DB_PATH", "chainlit_chat_history.db")

@cl.data_layer
def get_data_layer():
    return SQLiteDataLayer(database_path=db_path)
```

### Custom User Identification
```python
@cl.on_chat_start
async def on_chat_start():
    # Custom user identification logic
    user_id = cl.user_session.get("custom_user_id")
    if user_id:
        user = User(identifier=user_id, metadata={"source": "custom_auth"})
        cl.user_session.set("user", user)
        
        # Create/get user in database
        data_layer = get_data_layer()
        await data_layer.create_user(user)
```

## Migration and Backup

### Database Backup
```python
import shutil
from datetime import datetime

def backup_database():
    """Create a backup of the chat history database"""
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    backup_path = f"chainlit_backup_{timestamp}.db"
    shutil.copy2("chainlit_chat_history.db", backup_path)
    print(f"Database backed up to {backup_path}")
```

### Export Conversations
```python
import json

async def export_user_conversations(user_identifier: str, output_file: str):
    """Export all conversations for a user to JSON"""
    data_layer = get_data_layer()
    
    threads = await data_layer.list_threads(
        pagination=Pagination(first=0, cursor=1000),
        filters={"userIdentifier": user_identifier}
    )
    
    conversations = []
    for thread_data in threads.data:
        thread = await data_layer.get_thread(thread_data["id"])
        if thread:
            conversations.append(thread)
    
    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump(conversations, f, indent=2, default=str)
    
    print(f"Exported {len(conversations)} conversations to {output_file}")
```

## Troubleshooting

### Common Issues

1. **Database locked errors**: Ensure you're properly closing database sessions
2. **Missing conversations**: Check that the `@cl.data_layer` decorator is applied
3. **Performance issues**: Consider adding database indexes for large datasets

### Enable Logging
```python
import logging

# Enable SQLAlchemy logging for debugging
logging.basicConfig()
logging.getLogger('sqlalchemy.engine').setLevel(logging.INFO)
```

### Database Schema Updates
If you modify the schema, you may need to delete the existing database file to recreate it with the new structure, or implement proper database migrations using Alembic.

## Best Practices

1. **Regular Backups**: Set up automated backups of your SQLite database
2. **User Privacy**: Implement data retention policies and deletion capabilities
3. **Performance**: Monitor database size and consider archiving old conversations
4. **Security**: Encrypt sensitive data and implement proper access controls
5. **Testing**: Test conversation resumption and data persistence thoroughly

This implementation provides a robust foundation for chat history and conversation resumption in Chainlit applications using SQLite as the storage backend.
